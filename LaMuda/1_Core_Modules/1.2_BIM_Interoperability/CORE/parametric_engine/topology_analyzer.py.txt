#!/usr/bin/env python3 
"""
拓扑分析器 - LaMuDa系统核心模块 
功能：空间连通性分析/路径优化/循环检测 
论文依据：1.4节技术融合趋势 & 1.5节研究方法 
"""
import numpy as np 
import networkx as nx 
from sklearn.cluster  import DBSCAN 
from ortools.constraint_solver  import routing_enums_pb2 
from ortools.constraint_solver  import pywrapcp 
 
class TopologyAnalyzer:
    def __init__(self, ifc_data):
        """
        初始化拓扑分析器 
        :param ifc_data: BIM解析后的空间数据（字典格式）
        """
        self.spaces  = self._parse_ifc_data(ifc_data)
        self.graph  = self._build_topology_graph()
        self.connectivity_matrix  = None 
        self._generate_connectivity_matrix()
    
    def _parse_ifc_data(self, data):
        """解析IFC空间数据（论文图1-11跨模态转换器输出）"""
        return [
            {
                "id": item["GlobalId"],
                "name": item["Name"],
                "centroid": np.array(item["Centroid"]), 
                "boundaries": np.array(item["Boundaries"]), 
                "connections": item["ConnectedSpaces"]
            } for item in data["spaces"]
        ]
    
    def _build_topology_graph(self):
        """构建空间连通图（网络拓扑）"""
        G = nx.Graph()
        for space in self.spaces: 
            G.add_node(space["id"],  **space)
            for neighbor in space["connections"]:
                if not G.has_edge(space["id"],  neighbor):
                    # 计算空间中心距离作为边权重 
                    space_pos = next(s["centroid"] for s in self.spaces  if s["id"] == space["id"])
                    neighbor_pos = next(s["centroid"] for s in self.spaces  if s["id"] == neighbor)
                    weight = np.linalg.norm(space_pos  - neighbor_pos)
                    G.add_edge(space["id"],  neighbor, weight=weight)
        return G 
 
    def _generate_connectivity_matrix(self):
        """生成空间连通矩阵（用于VR路径可视化）"""
        nodes = list(self.graph.nodes) 
        size = len(nodes)
        self.connectivity_matrix  = np.zeros((size,  size))
        
        for i, src in enumerate(nodes):
            for j, dst in enumerate(nodes):
                if i != j and self.graph.has_edge(src,  dst):
                    self.connectivity_matrix[i][j]  = self.graph[src][dst]["weight"] 
        return self.connectivity_matrix  
 
    def optimize_circulation_path(self, start_node, end_node):
        """
        计算最优流通路径（论文1.5节支线二）
        :return: (路径节点序列, 总长度)
        """
        manager = pywrapcp.RoutingIndexManager(
            len(self.graph.nodes),  
            1,  # 单车辆路径 
            [nodes.index(start_node)], 
            [nodes.index(end_node)]
        )
        
        routing = pywrapcp.RoutingModel(manager)
        def distance_callback(from_index, to_index):
            from_node = manager.IndexToNode(from_index)
            to_node = manager.IndexToNode(to_index)
            return self.connectivity_matrix[from_node][to_node] 
        
        transit_callback_index = routing.RegisterTransitCallback(distance_callback)
        routing.SetArcCostEvaluatorOfAllVehicles(transit_callback_index)
        
        # 设置路径优化参数（论文表1-1优化目标）
        search_parameters = pywrapcp.DefaultRoutingSearchParameters()
        search_parameters.first_solution_strategy  = (
            routing_enums_pb2.FirstSolutionStrategy.PATH_CHEAPEST_ARC 
        )
        search_parameters.local_search_metaheuristic  = (
            routing_enums_pb2.LocalSearchMetaheuristic.GUIDED_LOCAL_SEARCH 
        )
        search_parameters.time_limit.FromSeconds(3)   # 论文要求3秒响应 
        
        solution = routing.SolveWithParameters(search_parameters)
        
        if solution:
            index = routing.Start(0)
            path = []
            while not routing.IsEnd(index):
                path.append(manager.IndexToNode(index)) 
                index = solution.Value(routing.NextVar(index))
            path.append(manager.IndexToNode(index)) 
            return path, solution.ObjectiveValue()
        return None, float('inf')
 
    def detect_spatial_clusters(self, max_distance=5.0):
        """
        识别空间功能分区（论文图1-10认知图谱）
        :param max_distance: 聚类阈值（米）
        :return: 聚类标签字典 {空间ID: 分区编号}
        """
        coords = np.array([s["centroid"]  for s in self.spaces]) 
        clustering = DBSCAN(eps=max_distance, min_samples=3).fit(coords)
        return {s["id"]: label for s, label in zip(self.spaces,  clustering.labels_)} 
    
    def find_cycles(self):
        """检测冗余循环路径（优化设计缺陷）"""
        return list(nx.simple_cycles(self.graph)) 
    
    def calculate_connectivity_index(self):
        """
        计算整体连通性指标（0-100分）
        论文1.6节创新点：设计熵值计算 
        """
        total_edges = self.graph.number_of_edges() 
        possible_edges = len(self.graph.nodes)  * (len(self.graph.nodes)  - 1) / 2 
        density = total_edges / possible_edges if possible_edges > 0 else 0 
        return int(density * 100)
 
# 示例用法（实际使用需连接BIM解析模块）
if __name__ == "__main__":
    # 模拟IFC数据（来自论文描述的BIM输出）
    sample_ifc = {
        "spaces": [
            {
                "GlobalId": "A001",
                "Name": "客厅",
                "Centroid": [0, 0],
                "Boundaries": [[-3,-3],[3,-3],[3,3],[-3,3]],
                "ConnectedSpaces": ["A002", "A003"]
            },
            {
                "GlobalId": "A002",
                "Name": "卧室",
                "Centroid": [7, 0],
                "Boundaries": [[5,-3],[9,-3],[9,3],[5,3]],
                "ConnectedSpaces": ["A001"]
            },
            {
                "GlobalId": "A003",
                "Name": "厨房",
                "Centroid": [0, 6],
                "Boundaries": [[-3,5],[3,5],[3,8],[-3,8]],
                "ConnectedSpaces": ["A001", "A004"]
            },
            {
                "GlobalId": "A004",
                "Name": "餐厅",
                "Centroid": [7, 6],
                "Boundaries": [[5,5],[9,5],[9,8],[5,8]],
                "ConnectedSpaces": ["A003"]
            }
        ]
    }
    
    # 拓扑分析流程 
    analyzer = TopologyAnalyzer(sample_ifc)
    
    # 核心功能测试 
    print(f"连通性指数: {analyzer.calculate_connectivity_index()}/100") 
    print(f"功能区划分: {analyzer.detect_spatial_clusters()}") 
    
    start, end = "A001", "A004"
    path, distance = analyzer.optimize_circulation_path(start,  end)
    print(f"从 {start} 到 {end} 的最优路径: {path} (距离: {distance:.2f}米)")
    
    if cycles := analyzer.find_cycles(): 
        print(f"检测到设计循环: {cycles}")