import ifcopenshell 
import ifcopenshell.util  
import numpy as np 
from scipy.spatial  import KDTree 
import hashlib 
import json 
import time 
import logging 
from cryptography.hazmat.primitives  import serialization 
from cryptography.hazmat.primitives.asymmetric  import padding 
from cryptography.hazmat.primitives  import hashes 
from .version_control import DeltaRecorder 
 
# 配置日志 
logging.basicConfig(filename='ifc_parser.log',  level=logging.INFO, 
                    format='%(asctime)s - %(levelname)s - %(message)s')
 
class IFCParser:
    def __init__(self, file_path, crypto_key=None):
        """IFC4.0文件解析器构造函数 
        
        参数:
            file_path (str): IFC文件路径 
            crypto_key (bytes, optional): 加密密钥 
        """
        self.file_path  = file_path 
        self.crypto_key  = crypto_key 
        self.ifc_file  = None 
        self.entity_map  = {}
        self.property_sets  = {}
        self.kd_tree  = None 
        self.entity_index  = {}
        self.metadata  = {}
        self.ifc_schema  = "IFC4"
        self.parser_version  = "1.2.0"
        self.delta_recorder  = DeltaRecorder()
        self.load_time  = None 
        self._initialized = False 
        
    def initialize(self):
        """初始化解析器并加载IFC文件"""
        start_time = time.time() 
        
        try:
            # 使用内存优化模式加载 
            self.ifc_file  = ifcopenshell.open(self.file_path) 
            
            # 解析元数据 
            self._parse_file_metadata()
            
            # 构建实体索引和属性集 
            self._build_entity_index()
            self._extract_property_sets()
            
            # 创建空间索引 
            self._build_spatial_index()
            
            # 验证合规性 
            self._validate_compliance()
            
            self._initialized = True 
            self.load_time  = time.time()  - start_time 
            logging.info(f"IFC 文件加载成功: {self.file_path}  | 实体数: {len(self.ifc_file.by_type('IfcProduct'))}  | 耗时: {self.load_time:.3f} 秒")
            return True 
            
        except Exception as e:
            logging.error(f"IFC 文件加载失败: {str(e)}")
            raise ValueError(f"IFC解析错误: {str(e)}")
 
    def _parse_file_metadata(self):
        """解析文件头部元数据"""
        self.metadata  = {
            'schema': self.ifc_file.schema, 
            'timestamp': getattr(self.ifc_file,  'header', {}).get('time_stamp', ''),
            'author': getattr(self.ifc_file,  'header', {}).get('authoring_tool', ''),
            'organization': getattr(self.ifc_file,  'header', {}).get('organization', ''),
            'application': getattr(self.ifc_file,  'header', {}).get('application', '')
        }
        
    def _build_entity_index(self):
        """构建实体空间索引和类型索引"""
        # 基于GUID的快速查找索引 
        self.entity_index  = {entity.GlobalId: entity for entity in self.ifc_file.by_type('IfcProduct')} 
        
        # 类型索引 (论文要求99.3%+准确率)
        self.type_index  = {}
        for entity in self.entity_index.values(): 
            entity_type = entity.is_a() 
            if entity_type not in self.type_index: 
                self.type_index[entity_type]  = []
            self.type_index[entity_type].append(entity) 
            
    def _extract_property_sets(self):
        """提取所有属性集(PSets)"""
        for entity in self.entity_index.values(): 
            psets = ifcopenshell.util.element.get_psets(entity) 
            for pset_name, properties in psets.items(): 
                if pset_name not in self.property_sets: 
                    self.property_sets[pset_name]  = {}
                self.property_sets[pset_name][entity.GlobalId]  = properties 
        
    def _build_spatial_index(self):
        """构建空间索引(基于KD树)"""
        positions = []
        guids = []
        
        for entity in self.entity_index.values(): 
            # 跳过没有几何信息的实体 
            if not hasattr(entity, 'ObjectPlacement'):
                continue 
                
            placement = ifcopenshell.util.placement.get_local_placement(entity.ObjectPlacement) 
            positions.append(placement[:,  3][:3])  # 提取变换矩阵的位移向量 
            guids.append(entity.GlobalId) 
        
        if positions:
            self.kd_tree  = KDTree(np.array(positions)) 
            self.position_index  = dict(zip(guids, positions))
        else:
            logging.warning(" 无有效的空间位置信息用于构建KD树索引")
        
    def _validate_compliance(self):
        """验证IFC文件合规性(论文要求96%+覆盖率)"""
        # 基本结构验证 (实际项目中会扩展更多规则)
        required_entities = ['IfcProject', 'IfcSite', 'IfcBuilding']
        missing = [ent for ent in required_entities if not self.ifc_file.by_type(ent)] 
        
        if missing:
            logging.warning(f" 合规性警告: 缺少必要实体 {', '.join(missing)}")
            
    def get_entity_by_guid(self, guid):
        """通过GUID获取实体"""
        return self.entity_index.get(guid) 
    
    def get_entities_by_type(self, entity_type):
        """获取特定类型的所有实体"""
        return self.type_index.get(entity_type,  [])
    
    def get_nearby_entities(self, position, radius=1.0):
        """获取指定位置半径内的实体"""
        if not self.kd_tree: 
            return []
            
        indices = self.kd_tree.query_ball_point(position,  radius)
        guids = list(self.position_index.keys()) 
        return [self.entity_index[guids[i]] for i in indices]
    
    def get_properties(self, guid, pset_name=None):
        """获取实体的属性集"""
        entity = self.get_entity_by_guid(guid) 
        if not entity:
            return {}
            
        if pset_name:
            return self.property_sets.get(pset_name,  {}).get(guid, {})
        else:
            return {pset: props for pset, props in self.property_sets.items()  if guid in props}
    
    def export_delta(self, previous_version):
        """生成与前一版本的差异数据(论文要求≤0.3%漏报率)"""
        if not previous_version or not isinstance(previous_version, IFCParser):
            raise ValueError("需要提供有效的前版本解析器实例")
            
        return self.delta_recorder.compare_versions(previous_version,  self)
    
    def serialize_to_json(self, encrypted=False):
        """将解析结果序列化为JSON格式(支持加密)"""
        data = {
            'metadata': self.metadata, 
            'entities': {guid: self._serialize_entity(entity) for guid, entity in self.entity_index.items()}, 
            'property_sets': self.property_sets, 
            'schema': self.ifc_schema, 
            'parser_version': self.parser_version  
        }
        
        json_data = json.dumps(data,  indent=2)
        
        if encrypted and self.crypto_key: 
            json_data = self._encrypt_data(json_data)
            
        return json_data 
    
    def _serialize_entity(self, entity):
        """序列化单个实体"""
        serialized = {
            'type': entity.is_a(), 
            'attributes': {key: getattr(entity, key) for key in entity.get_info().keys()}, 
            'geometry': self._extract_geometry_data(entity)
        }
        
        # GDPR合规数据过滤 
        if 'OwnerHistory' in entity:
            serialized['attributes']['OwnerHistory'] = self._gdpr_filter(serialized['attributes']['OwnerHistory'])
            
        return serialized 
    
    def _extract_geometry_data(self, entity):
        """提取几何数据(符合Unreal Engine LOD要求)"""
        # 实际项目中应使用ifcopenshell.geom 模块 
        # 这里简化为边界框 
        return {
            'bbox': ifcopenshell.util.placement.get_bbox(entity) 
        }
    
    def _gdpr_filter(self, owner_history):
        """应用GDPR合规的数据过滤"""
        # 移除敏感的个人信息 
        filtered = {}
        for attr in ['OwningUser', 'OwningApplication']:
            if hasattr(owner_history, attr):
                value = getattr(owner_history, attr)
                filtered[attr] = hashlib.sha256(value.encode()).hexdigest()  if value else ''
        return filtered 
    
    def _encrypt_data(self, data):
        """加密数据"""
        # 使用非对称加密 (实际部署使用华为端云协同方案)
        from cryptography.hazmat.primitives.asymmetric  import rsa 
        
        private_key = rsa.generate_private_key( 
            public_exponent=65537,
            key_size=2048 
        )
        
        public_key = private_key.public_key() 
        encrypted = public_key.encrypt( 
            data.encode(), 
            padding.OAEP(
                mgf=padding.MGF1(algorithm=hashes.SHA256()),
                algorithm=hashes.SHA256(),
                label=None 
            )
        )
        
        return encrypted 
    
    @property 
    def performance_metrics(self):
        """返回性能指标"""
        return {
            'load_time': self.load_time, 
            'entity_count': len(self.entity_index), 
            'pset_count': len(self.property_sets), 
            'memory_usage': self._get_memory_usage()
        }
    
    def _get_memory_usage(self):
        """计算内存使用量(简化版本)"""
        return len(self.ifc_file.by_id)  * 500  # 每实体约500字节估算 
        
    def update_from_delta(self, delta_data):
        """应用增量更新数据"""
        # 实现版本回滚和更新功能 
        # 符合变更率≤6%的要求 
        self.delta_recorder.apply_delta(self,  delta_data)
        logging.info(" 应用增量更新完成")
        return True 