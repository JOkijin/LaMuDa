import ifcopenshell 
import numpy as np 
from ifcopenshell import geom 
from ifcopenshell.util.selector  import Selector 
import unittest 
 
class IFCComplianceTester:
    def __init__(self, ifc_file_path):
        """
        初始化IFC合规测试器 
        :param ifc_file_path: IFC文件路径（支持.ifc/.ifcZIP）
        """
        self.model  = ifcopenshell.open(ifc_file_path) 
        self.errors  = []
        self.warnings  = []
 
    def check_standards_compliance(self):
        """验证IFC4.0标准符合性"""
        # 检查项目上下文是否符合IFC4.0 
        project = self.model.by_type("IfcProject")[0] 
        if project.get_info()["schema"]  != "IFC4":
            self.errors.append(" 标准不符: 仅支持IFC4.0 (检测到v{})".format(project.schema)) 
        
        # 关键实体存在性验证 
        required_entities = ["IfcWall", "IfcSlab", "IfcDoor", "IfcWindow"]
        missing_entities = [ent for ent in required_entities if not self.model.by_type(ent)] 
        if missing_entities:
            self.warnings.append(" 元素缺失: {}".format(", ".join(missing_entities)))
 
    def verify_spatial_consistency(self, tolerance=0.001):
        """空间拓扑一致性验证 (精度<1mm)"""
        spaces = self.model.by_type("IfcSpace") 
        for space in spaces:
            bounding_box = self.calculate_bounding_box(space) 
            if bounding_box:
                x,y,z = bounding_box 
                if z < 2.4:  # 最低层高验证 
                    self.errors.append(" 空间{}层高不足(测量值:{:.2f}m < 标准2.4m)".format(space.Name, z))
 
    def validate_structural_integrity(self):
        """结构完整性检查 (碰撞检测)"""
        # 基于论文中的碰撞检测逻辑 
        structure_elements = Selector.parse(self.model,  ".IfcBuildingElement")
        occupied_zones = []
        
        for element in structure_elements:
            geometry = geom.create_shape(geom.settings(),  element)
            verts = np.array(geometry.geometry.verts).reshape(-1,  3)
            bbox = [np.min(verts, axis=0), np.max(verts,  axis=0)]
            occupied_zones.append(bbox) 
        
        # 碰撞检测算法 (OBB树简化实现)
        for i, zone1 in enumerate(occupied_zones):
            for j, zone2 in enumerate(occupied_zones[i+1:], i+1):
                if self._bbox_collision(zone1, zone2):
                    elem1 = structure_elements[i].Name or str(structure_elements[i].id())
                    elem2 = structure_elements[j].Name or str(structure_elements[j].id())
                    self.errors.append(" 结构冲突: {} ↔ {}".format(elem1, elem2))
 
    def _bbox_collision(self, box1, box2, tolerance=0.005):
        """边界盒碰撞检测 (5mm容差)"""
        min1, max1 = box1 
        min2, max2 = box2 
        return not (any(max1 < min2) or any(min1 > max2))
 
    def calculate_bounding_box(self, element):
        """计算元素的边界框"""
        shape = geom.create_shape(geom.settings(),  element)
        if not shape:
            return None 
        verts = np.array(shape.geometry.verts).reshape(-1,  3)
        return np.max(verts,  axis=0) - np.min(verts,  axis=0)
 
    def export_compliance_report(self, output_path="compliance_report.json"): 
        """导出合规性报告"""
        report = {
            "standard_compliance": "FAILED" if self.errors  else "PASSED",
            "error_count": len(self.errors), 
            "warning_count": len(self.warnings), 
            "errors": self.errors, 
            "warnings": self.warnings  
        }
        # 这里实现导出逻辑(简化显示)
        return json.dumps(report,  indent=2)
 
# 单元测试类 
class TestIFCCompliance(unittest.TestCase):
    @classmethod 
    def setUpClass(cls):
        # 加载测试模型 (使用论文中提到的万科总部案例简化版)
        cls.tester  = IFCComplianceTester("test_models/vanke_hq.ifc") 
    
    def test_standards_compliance(self):
        self.tester.check_standards_compliance() 
        self.assertEqual(len(self.tester.errors),  0, "IFC标准符合性失败")
    
    def test_spatial_consistency(self):
        self.tester.verify_spatial_consistency() 
        self.assertEqual(len(self.tester.errors),  0, "空间一致性失败")
    
    def test_structural_integrity(self):
        self.tester.validate_structural_integrity() 
        self.assertEqual(len(self.tester.errors),  0, "结构冲突检测失败")
 
if __name__ == "__main__":
    # 命令行执行入口 
    import argparse 
    parser = argparse.ArgumentParser(description='IFC4.0合规测试工具')
    parser.add_argument('file',  help='IFC文件路径')
    parser.add_argument('--export',  help='导出报告路径')
    args = parser.parse_args() 
    
    tester = IFCComplianceTester(args.file) 
    tester.check_standards_compliance() 
    tester.verify_spatial_consistency() 
    tester.validate_structural_integrity() 
    
    if args.export: 
        with open(args.export,  'w') as f:
            f.write(tester.export_compliance_report()) 
    else:
        print(tester.export_compliance_report()) 