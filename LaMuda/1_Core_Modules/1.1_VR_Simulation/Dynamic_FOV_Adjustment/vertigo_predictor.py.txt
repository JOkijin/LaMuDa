import numpy as np 
import pandas as pd 
from scipy.signal  import welch 
from sklearn.ensemble  import RandomForestClassifier 
from sklearn.model_selection  import train_test_split 
import joblib 
class VertigoPredictor:
    """
    VR眩晕预测系统（基于金高峰研究中提及的生理监测与算法）
    核心功能：
     1. 动态视场调节（SIGGRAPH 2024算法）
     2. EEG θ波实时分析（θ波>40%时触发保护机制）
     3. 运动敏感度建模（参考剑桥大学眩晕模型）
    """
    
    def __init__(self, sample_rate=256):
        """
        初始化预测系统 
        :param sample_rate: EEG采样频率（Hz）
        """
        self.model  = None 
        self.sample_rate  = sample_rate 
        # 预设阈值（参考Nature 2023研究）
        self.THETA_THRESHOLD = 0.40  # θ波能量占比阈值 
        self.MOTION_THRESHOLD = {  # 运动参数阈值（rad/s）
            'angular_velocity': 1.5, 
            'linear_accel': 0.3 
        }
        
    def load_model(self, model_path='vertigo_model.pkl'): 
        """加载预训练眩晕预测模型"""
        try:
            self.model  = joblib.load(model_path) 
            print(f"成功加载眩晕预测模型：{model_path}")
        except FileNotFoundError:
            print("警告：未找到预训练模型，使用默认参数运行")
    def process_eeg(self, eeg_data):
        """
        处理EEG信号并计算θ波能量占比 
        :param eeg_data: 单通道EEG数据（1D数组）
        :return: theta_ratio (θ波能量占比)
        """
        # 计算功率谱密度 
        freqs, psd = welch(eeg_data, fs=self.sample_rate,  nperseg=min(512, len(eeg_data)))
        
        # 定义频带范围（Hz）
        bands = {
            'delta': (1, 4),
            'theta': (4, 8),
            'alpha': (8, 13),
            'beta': (13, 30)
        }
        
        # 计算各频段能量 
        band_energy = {}
        for band, (low, high) in bands.items(): 
            idx = np.logical_and(freqs  >= low, freqs <= high)
            band_energy[band] = np.sum(psd[idx]) 
            
        # 计算θ波占比 
        total_energy = sum(band_energy.values()) 
        theta_ratio = band_energy['theta'] / total_energy if total_energy > 0 else 0 
        
        return theta_ratio 
    def dynamic_fov_adjustment(self, motion_params):
        """
        动态视场调节算法（SIGGRAPH 2024）
        :param motion_params: 运动参数（角速度，线加速度）
        :return: FOV缩放因子（0.6-1.0）
        """
        angular_vel = abs(motion_params['angular_velocity'])
        linear_accel = abs(motion_params['linear_accel'])
        
        # 计算运动强度指标 
        motion_intensity = min(1.0, (
            angular_vel / self.MOTION_THRESHOLD['angular_velocity'] + 
            linear_accel / self.MOTION_THRESHOLD['linear_accel']
        ) / 2)
        
        # FOV缩放规则（参考MIT动态算法）
        if motion_intensity > 0.8:
            return 0.6   # 最高防护级别 
        elif motion_intensity > 0.5:
            return 0.75 
        elif motion_intensity > 0.3:
            return 0.85 
        else:
            return 1.0   # 无调节 
    def predict_vertigo_risk(self, eeg_data=None, motion_params=None):
        """
        预测眩晕风险等级 
        :return: dict{
            'risk_level': 0-3 (0=安全, 3=高风险),
            'fov_factor': FOV缩放因子,
            'action': 防护措施指令 
        }
        """
        # 默认安全状态 
        result = {'risk_level': 0, 'fov_factor': 1.0, 'action': 'normal'}
        
        # EEG优先检测 
        if eeg_data is not None:
            theta_ratio = self.process_eeg(eeg_data) 
            if theta_ratio > self.THETA_THRESHOLD:
                result.update({ 
                    'risk_level': 2,
                    'fov_factor': 0.7,
                    'action': 'reduced_mode'
                })
                return result 
                
        # 运动参数检测 
        if motion_params:
            fov_factor = self.dynamic_fov_adjustment(motion_params) 
            if fov_factor < 0.85:
                result.update({ 
                    'risk_level': max(result['risk_level'], 1),
                    'fov_factor': fov_factor,
                    'action': 'fov_adjusted'
                })
                
        # 模型预测（若有）
        if self.model  and eeg_data is not None and motion_params:
            features = np.array([ 
                theta_ratio,
                motion_params['angular_velocity'],
                motion_params['linear_accel']
            ]).reshape(1, -1)
            
            risk_level = self.model.predict(features)[0] 
            result['risk_level'] = max(result['risk_level'], risk_level)
            
            if risk_level >= 2:
                result['action'] = 'emergency'
        
        return result 
# ===== 实用工具函数 ===== 
def simulate_eeg(theta_amp=1.0, duration=10):
    """生成模拟EEG信号（θ波为主）"""
    t = np.linspace(0,  duration, int(duration * 256))
    # 基础θ波 (4-8Hz)
    signal = theta_amp * np.sin(2  * np.pi  * 6 * t)
    # 添加噪声 
    signal += 0.2 * np.random.randn(len(t)) 
    return signal 
if __name__ == "__main__":
    # 示例用法 
    predictor = VertigoPredictor()
    
    # 场景1：正常用户 
    print("=== 低风险场景 ===")
    motion_params = {'angular_velocity': 0.5, 'linear_accel': 0.1}
    eeg_data = simulate_eeg(theta_amp=0.3)
    print(predictor.predict_vertigo_risk(eeg_data,  motion_params))
    
    # 场景2：潜在眩晕 
    print("\n=== 中风险场景 ===")
    motion_params = {'angular_velocity': 1.8, 'linear_accel': 0.4}
    print(predictor.predict_vertigo_risk(motion_params=motion_params)) 
    
    # 场景3：高风险 
    print("\n=== 高风险场景 ===")
    eeg_data = simulate_eeg(theta_amp=2.0)  # θ波异常增强 
    motion_params = {'angular_velocity': 2.5, 'linear_accel': 0.5}
    print(predictor.predict_vertigo_risk(eeg_data,  motion_params))