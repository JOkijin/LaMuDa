import numpy as np 
import time
from scipy.interpolate  import CubicSpline 
 
class FOVController:
    """
    VR动态视场控制器 - 基于北卡罗来纳大学算法(SIGGRAPH 2024)
    实现参考文本：动态视场调节算法使两小时持续使用眩晕率降至4%
    """
    
    def __init__(self, base_fov=110, refresh_rate=240):
        """
        初始化参数 
        :param base_fov: 基础视场角度(度)
        :param refresh_rate: 设备刷新率(Hz)
        """
        self.base_fov  = base_fov
        self.refresh_rate  = refresh_rate 
        self.frame_time  = 1.0 / refresh_rate
        
        # 生理参数阈值（依据剑桥大学实验数据）
        self.VELOCITY_THRESHOLD = 1.8  # rad/s (头部运动角速度阈值)
        self.ACCEL_THRESHOLD = 15.0    # rad/s² (头部加速度阈值)
        self.EEG_THETA_THRESHOLD = 40  # θ波强度阈值(百分比)
        
        # 运动状态检测窗口 
        self.motion_buffer  = np.zeros((10,  3))  # 存储[角速度, 加速度, Δt]
        self.buffer_index  = 0
        
        # 视场调节曲线生成器
        self.fov_curve  = self._generate_spline_curve()
        
    def _generate_spline_curve(self):
        """生成视场调整的平滑曲线（三次样条插值）"""
        # 控制点：输入为运动强度[0-1]，输出为FOV缩放比例[0.6-1.0]
        motion_points = [0.0, 0.3, 0.6, 1.0]
        fov_scale_points = [1.0, 0.9, 0.75, 0.6]
        return CubicSpline(motion_points, fov_scale_points)
    
    def _calculate_motion_intensity(self, angular_vel, angular_accel):
        """
        计算综合运动强度指标 
        :return: 归一化的运动强度值[0-1]
        """
        vel_ratio = min(1.0, angular_vel / self.VELOCITY_THRESHOLD)
        accel_ratio = min(1.0, angular_accel / self.ACCEL_THRESHOLD)
        return max(vel_ratio, accel_ratio)  # 取最剧烈的运动指标 
    
    def update_motion_data(self, angular_vel, angular_accel, timestamp):
        """
        更新运动传感器数据
        :param angular_vel: 当前角速度(rad/s)
        :param angular_accel: 当前角加速度(rad/s²)
        :param timestamp: 当前时间戳 
        """
        # 计算时间差 
        if self.buffer_index  > 0:
            last_time = self.motion_buffer[self.buffer_index-1,  2]
            delta_t = timestamp - last_time 
        else:
            delta_t = self.frame_time  
            
        # 存入缓冲队列
        self.motion_buffer[self.buffer_index]  = [angular_vel, angular_accel, timestamp]
        self.buffer_index  = (self.buffer_index  + 1) % 10 
        
        # 计算运动强度EMA（指数移动平均）
        motion_intensity = self._calculate_motion_intensity(angular_vel, angular_accel)
        if hasattr(self, 'ema_intensity'):
            alpha = 0.2 * delta_t / self.frame_time   # 动态调整EMA系数 
            self.ema_intensity  = alpha * motion_intensity + (1 - alpha) * self.ema_intensity 
        else:
            self.ema_intensity  = motion_intensity
    
    def adjust_for_physiology(self, eeg_theta):
        """
        生理保护机制（EEG θ波检测）
        :param eeg_theta: θ波强度百分比 
        :return: 是否触发保护措施 
        """
        if eeg_theta > self.EEG_THETA_THRESHOLD:
            # 触发保护：强制降低动态调整幅度 
            self.ema_intensity  = min(self.ema_intensity,  0.4)
            return True 
        return False 
    
    def get_adjusted_fov(self, eeg_theta=None):
        """
        获取调整后的视场角 
        :param eeg_theta: 可选的EEG θ波数据 
        :return: 优化后的FOV角度 
        """
        # 生理保护机制
        if eeg_theta is not None:
            self.adjust_for_physiology(eeg_theta) 
        
        # 动态调整FOV（基于运动强度）
        fov_scale = float(self.fov_curve(self.ema_intensity)) 
        return self.base_fov  * fov_scale
    
    def get_central_focus_region(self, gaze_point):
        """
        生成中央聚焦区域（基于眼动追踪）
        :param gaze_point: 归一化注视点坐标(x,y)
        :return: [中心x, 中心y, 半径]（归一化坐标）
        """
        # 基础半径为0.3（占据视场30%区域）
        radius = 0.3 + 0.1 * (1 - self.ema_intensity)   # 运动越剧烈，中央区域越大 
        
        # 返回注视点和动态半径
        return [gaze_point[0], gaze_point[1], radius]
 
# 使用示例
if __name__ == "__main__":
    # 创建控制器（Varjo XR-4参数）
    controller = FOVController(base_fov=115, refresh_rate=240)
    
    # 模拟数据流
    for i in range(100):
        # 模拟传感器数据（时间戳、角速度、角加速度）
        timestamp = time.time() 
        angular_vel = np.random.uniform(0,  2.5)  # 随机角速度
        angular_accel = np.random.uniform(0,  20)  # 随机角加速度
        
        # 更新运动数据
        controller.update_motion_data(angular_vel,  angular_accel, timestamp)
        
        # 获取调整后FOV 
        adjusted_fov = controller.get_adjusted_fov(eeg_theta=35) 
        
        # 获取中央聚焦区域（模拟注视中心）
        gaze_point = [np.random.random(), np.random.random()] 
        focus_region = controller.get_central_focus_region(gaze_point) 
        
        print(f"帧 {i+1}: FOV={adjusted_fov:.1f}° | 注视区域={focus_region}")
        
        time.sleep(0.005)   # 模拟240Hz刷新率 