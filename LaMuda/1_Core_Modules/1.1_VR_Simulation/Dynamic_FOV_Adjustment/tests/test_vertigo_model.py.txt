# test_vertigo_model.py  
import numpy as np
import pandas as pd 
from scipy import signal
import matplotlib.pyplot  as plt
 
class VertigoSimulator:
    """
    VR眩晕概率模型（基于生理信号+运动参数）
    参考指标：Nature 2023数据（眩晕率28% @45min）
    目标：实现≤4%眩晕率（连续使用2小时）
    """
    def __init__(self, fps=240, session_duration=7200):
        self.fps  = fps  # 帧率 (Varjo XR-4配置)
        self.duration  = session_duration  # 会话时长(秒)
        self.frames  = int(session_duration * fps)
        # 运动参数阈值（实验校准值）
        self.MOTION_THRESH = {
            'angular_velocity': 2.0,  # 角速度(rad/s)
            'acceleration': 0.3,      # 加速度(g)
            'jerk': 0.5               # 加加速度(g/s)
        }
    
    def _generate_head_motion(self):
        """生成头部运动模拟数据（含突发剧烈运动）"""
        t = np.linspace(0,  self.duration,  self.frames) 
        # 基础运动（平滑正弦波）
        base_motion = 0.5 * np.sin(2  * np.pi  * 0.1 * t)  
        # 突发运动（脉冲信号）
        impulses = np.zeros_like(t) 
        for _ in range(8):  # 随机8次剧烈运动
            idx = np.random.randint(0,  self.frames) 
            impulses[idx:idx+30] = 2.0 * np.random.randn(30) 
        return base_motion + impulses
    
    def _calculate_motion_params(self, motion_data):
        """计算眩晕关键运动参数"""
        dt = 1/self.fps 
        # 角速度 (一阶导)
        velocity = np.gradient(motion_data,  dt)  
        # 加速度 (二阶导)
        acceleration = np.gradient(velocity,  dt)  
        # 加加速度 (三阶导)
        jerk = np.gradient(acceleration,  dt)      
        return velocity, acceleration, jerk 
    
    def _dynamic_fov_adjustment(self, motion_params):
        """动态视场调节算法（核心专利）"""
        velocity, acceleration, jerk = motion_params
        risk_score = np.zeros_like(velocity) 
        # 风险计算（加权模型）
        risk_score += 0.6 * np.abs(velocity)  / self.MOTION_THRESH['angular_velocity']
        risk_score += 0.3 * np.abs(acceleration)  / self.MOTION_THRESH['acceleration']
        risk_score += 0.1 * np.abs(jerk)  / self.MOTION_THRESH['jerk']
        
        # 动态FOV缩放（风险>1时触发）
        fov_factor = np.ones_like(risk_score) 
        high_risk_idx = np.where(risk_score  > 1.0)[0]
        fov_factor[high_risk_idx] = 1 - 0.4 * (risk_score[high_risk_idx] - 1)
        return np.clip(fov_factor,  0.6, 1.0), risk_score
    
    def _vertigo_probability(self, risk_score, fov_factor):
        """眩晕概率模型（生理-运动耦合模型）"""
        # 累积风险指数（时间积分）
        cumulative_risk = signal.savgol_filter( 
            np.cumsum(risk_score),  window_length=301, polyorder=3
        ) / 1000 
        
        # FOV调节补偿效应 
        compensation = 1.5 * (1 - fov_factor)  
        return np.clip(cumulative_risk  - compensation, 0, None)
    
    def run_simulation(self, plot_results=False):
        """执行完整仿真流程"""
        # 1. 生成头部运动数据 
        motion_data = self._generate_head_motion()
        
        # 2. 计算运动参数 
        velocity, acceleration, jerk = self._calculate_motion_params(motion_data)
        
        # 3. 动态FOV调节
        fov_factor, risk_score = self._dynamic_fov_adjustment((velocity, acceleration, jerk))
        
        # 4. 眩晕概率计算 
        vertigo_prob = self._vertigo_probability(risk_score, fov_factor)
        
        # 5. 结果分析 
        max_prob = np.max(vertigo_prob) 
        vertigo_duration = np.sum(vertigo_prob  > 0.7) / self.fps   # 高风险时长 
        
        if plot_results:
            self._visualize_results(motion_data, velocity, acceleration, 
                                   fov_factor, vertigo_prob)
        
        return {
            "max_vertigo_prob": max_prob,
            "high_risk_duration": vertigo_duration,
            "vertigo_occurred": max_prob > 0.85  # 发生眩晕阈值 
        }
    
    def _visualize_results(self, motion, velocity, acceleration, fov_factor, vertigo_prob):
        """可视化关键参数时序图"""
        plt.figure(figsize=(15,  10))
        
        # 运动参数 
        plt.subplot(4,  1, 1)
        plt.plot(motion,  label='头部位移')
        plt.plot(velocity,  label='角速度')
        plt.plot(acceleration,  label='加速度')
        plt.legend() 
        plt.title(' 头部运动参数')
        
        # FOV调节效果 
        plt.subplot(4,  1, 2)
        plt.plot(fov_factor,  'r-', linewidth=2)
        plt.ylim(0.5,  1.1)
        plt.title(' 动态视场调节 (FOV缩放因子)')
        
        # 眩晕概率 
        plt.subplot(4,  1, 3)
        plt.plot(vertigo_prob,  'm-', linewidth=2)
        plt.axhline(y=0.85,  color='r', linestyle='--', label='眩晕阈值')
        plt.title(' 实时眩晕概率')
        plt.legend() 
        
        # 风险热力图
        plt.subplot(4,  1, 4)
        plt.imshow([vertigo_prob],  aspect='auto', cmap='hot_r')
        plt.colorbar(label=' 眩晕概率')
        plt.title(' 眩晕风险热力图')
        plt.yticks([]) 
        
        plt.tight_layout() 
        plt.savefig('vertigo_simulation_report.png',  dpi=150)
        plt.show() 
 
# ===== 验证测试 =====
if __name__ == "__main__":
    print("=== VR眩晕模型验证测试 ===")
    print("目标：连续使用2小时眩晕率≤4%")
    
    # 执行100次蒙特卡洛仿真 
    results = []
    simulator = VertigoSimulator()
    for i in range(100):
        result = simulator.run_simulation(plot_results=(i==0))   # 仅绘制第一次结果 
        results.append(result['vertigo_occurred']) 
        
        if i % 10 == 0:
            print(f"测试进度: {i+1}/100 | 当前眩晕率: {np.mean(results)*100:.1f}%") 
    
    # 最终统计 
    vertigo_rate = np.mean(results)  * 100
    print("\n===== 最终测试报告 =====")
    print(f"测试场景: {simulator.duration//60} 分钟VR连续使用")
    print(f"眩晕发生率: {vertigo_rate:.2f}%")
    print(f"达标判定: {'通过' if vertigo_rate <= 4 else '失败'}")
    
    # 生成测试报告 
    report = {
        "test_standard": "ISO 9241-392 VR安全规范",
        "target_vertigo_rate": "≤4% (2小时连续使用)",
        "actual_vertigo_rate": f"{vertigo_rate:.2f}%",
        "frame_rate": f"{simulator.fps}Hz", 
        "motion_thresholds": simulator.MOTION_THRESH,
        "compliance_status": "PASS" if vertigo_rate <= 4 else "FAIL"
    }
    pd.DataFrame([report]).to_csv("vertigo_test_report.csv",  index=False)